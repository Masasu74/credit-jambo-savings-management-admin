version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7
    container_name: ndfis-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-changeme}
      MONGO_INITDB_DATABASE: ${MONGO_DB:-anchorfinance}
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
      - ./backend/backups:/backups
    ports:
      - "${MONGO_PORT:-27017}:27017"
    networks:
      - ndfis-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s
    command: --wiredTigerCacheSizeGB 1.5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ndfis-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - ndfis-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: ndfis-backend
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 4000
      DATA_DIR: /app/uploads
      MONGODB_URI: mongodb://${MONGO_USER:-admin}:${MONGO_PASSWORD:-changeme}@mongodb:27017/${MONGO_DB:-anchorfinance}?authSource=admin
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_ENABLED: ${REDIS_ENABLED:-true}
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      JWT_SECRET: ${JWT_SECRET:-random#secret#key#for#development#32#chars#long}
      ENCRYPTION_SECRET: ${ENCRYPTION_SECRET:-12345678901234567890123456789012}
      BACKUP_ENCRYPTION_KEY: ${BACKUP_ENCRYPTION_KEY:-1234567890123456789012345678901234567890123456789012345678901234}
      CLOUDINARY_CLOUD_NAME: ${CLOUDINARY_CLOUD_NAME}
      CLOUDINARY_API_KEY: ${CLOUDINARY_API_KEY}
      CLOUDINARY_API_SECRET: ${CLOUDINARY_API_SECRET}
      ENABLE_CLOUDINARY: ${ENABLE_CLOUDINARY:-false}
      MULTI_TENANT_MODE: ${MULTI_TENANT_MODE:-false}
      DEFAULT_CLIENT: ${DEFAULT_CLIENT:-anchorfinance}
      DB_MAX_POOL_SIZE: 100
      DB_MIN_POOL_SIZE: 10
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
      - ./backend/backups:/app/backups
    ports:
      - "${BACKEND_PORT:-4000}:4000"
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ndfis-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:4000/api/health', (r) => process.exit(r.statusCode === 200 ? 0 : 1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: ndfis-frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-3001}:80"
    depends_on:
      - backend
    networks:
      - ndfis-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s

volumes:
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  redis_data:
    driver: local

networks:
  ndfis-network:
    driver: bridge

